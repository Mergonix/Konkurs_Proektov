//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApplication1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service1.Auth", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class Service1Auth : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool adminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool errorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string error_messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int id_userField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool admin {
            get {
                return this.adminField;
            }
            set {
                if ((this.adminField.Equals(value) != true)) {
                    this.adminField = value;
                    this.RaisePropertyChanged("admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool error {
            get {
                return this.errorField;
            }
            set {
                if ((this.errorField.Equals(value) != true)) {
                    this.errorField = value;
                    this.RaisePropertyChanged("error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string error_message {
            get {
                return this.error_messageField;
            }
            set {
                if ((object.ReferenceEquals(this.error_messageField, value) != true)) {
                    this.error_messageField = value;
                    this.RaisePropertyChanged("error_message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id_user {
            get {
                return this.id_userField;
            }
            set {
                if ((this.id_userField.Equals(value) != true)) {
                    this.id_userField = value;
                    this.RaisePropertyChanged("id_user");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service1.Competition", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class Service1Competition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ApplicationDeadlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ID_CompetitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PrizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ApplicationDeadline {
            get {
                return this.ApplicationDeadlineField;
            }
            set {
                if ((this.ApplicationDeadlineField.Equals(value) != true)) {
                    this.ApplicationDeadlineField = value;
                    this.RaisePropertyChanged("ApplicationDeadline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID_Competition {
            get {
                return this.ID_CompetitionField;
            }
            set {
                if ((this.ID_CompetitionField.Equals(value) != true)) {
                    this.ID_CompetitionField = value;
                    this.RaisePropertyChanged("ID_Competition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinValue {
            get {
                return this.MinValueField;
            }
            set {
                if ((this.MinValueField.Equals(value) != true)) {
                    this.MinValueField = value;
                    this.RaisePropertyChanged("MinValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Prize {
            get {
                return this.PrizeField;
            }
            set {
                if ((this.PrizeField.Equals(value) != true)) {
                    this.PrizeField = value;
                    this.RaisePropertyChanged("Prize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service1.Experts", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class Service1Experts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FIOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ID_ExpertsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIO {
            get {
                return this.FIOField;
            }
            set {
                if ((object.ReferenceEquals(this.FIOField, value) != true)) {
                    this.FIOField = value;
                    this.RaisePropertyChanged("FIO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID_Experts {
            get {
                return this.ID_ExpertsField;
            }
            set {
                if ((this.ID_ExpertsField.Equals(value) != true)) {
                    this.ID_ExpertsField = value;
                    this.RaisePropertyChanged("ID_Experts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service1.Evalulation", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class Service1Evalulation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double EvalulationNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Expert_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Request_IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double EvalulationNum {
            get {
                return this.EvalulationNumField;
            }
            set {
                if ((this.EvalulationNumField.Equals(value) != true)) {
                    this.EvalulationNumField = value;
                    this.RaisePropertyChanged("EvalulationNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Expert_ID {
            get {
                return this.Expert_IDField;
            }
            set {
                if ((this.Expert_IDField.Equals(value) != true)) {
                    this.Expert_IDField = value;
                    this.RaisePropertyChanged("Expert_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Request_ID {
            get {
                return this.Request_IDField;
            }
            set {
                if ((this.Request_IDField.Equals(value) != true)) {
                    this.Request_IDField = value;
                    this.RaisePropertyChanged("Request_ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service1.Request", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class Service1Request : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Competition_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ID_RequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Competition_ID {
            get {
                return this.Competition_IDField;
            }
            set {
                if ((this.Competition_IDField.Equals(value) != true)) {
                    this.Competition_IDField = value;
                    this.RaisePropertyChanged("Competition_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID_Request {
            get {
                return this.ID_RequestField;
            }
            set {
                if ((this.ID_RequestField.Equals(value) != true)) {
                    this.ID_RequestField = value;
                    this.RaisePropertyChanged("ID_Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service1.Users", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class Service1Users : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FIOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ID_UsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((this.AdminField.Equals(value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIO {
            get {
                return this.FIOField;
            }
            set {
                if ((object.ReferenceEquals(this.FIOField, value) != true)) {
                    this.FIOField = value;
                    this.RaisePropertyChanged("FIO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID_Users {
            get {
                return this.ID_UsersField;
            }
            set {
                if ((this.ID_UsersField.Equals(value) != true)) {
                    this.ID_UsersField = value;
                    this.RaisePropertyChanged("ID_Users");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service1.Users_Request", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class Service1Users_Request : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Request_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Users_IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Request_ID {
            get {
                return this.Request_IDField;
            }
            set {
                if ((this.Request_IDField.Equals(value) != true)) {
                    this.Request_IDField = value;
                    this.RaisePropertyChanged("Request_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamName {
            get {
                return this.TeamNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamNameField, value) != true)) {
                    this.TeamNameField = value;
                    this.RaisePropertyChanged("TeamName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Users_ID {
            get {
                return this.Users_IDField;
            }
            set {
                if ((this.Users_IDField.Equals(value) != true)) {
                    this.Users_IDField = value;
                    this.RaisePropertyChanged("Users_ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Authorisation", ReplyAction="http://tempuri.org/IService1/AuthorisationResponse")]
        WpfApplication1.ServiceReference1.Service1Auth Authorisation(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Authorisation", ReplyAction="http://tempuri.org/IService1/AuthorisationResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Auth> AuthorisationAsync(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCompetition", ReplyAction="http://tempuri.org/IService1/AddCompetitionResponse")]
        void AddCompetition(WpfApplication1.ServiceReference1.Service1Competition competition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCompetition", ReplyAction="http://tempuri.org/IService1/AddCompetitionResponse")]
        System.Threading.Tasks.Task AddCompetitionAsync(WpfApplication1.ServiceReference1.Service1Competition competition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddExpert", ReplyAction="http://tempuri.org/IService1/AddExpertResponse")]
        void AddExpert(WpfApplication1.ServiceReference1.Service1Experts Expert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddExpert", ReplyAction="http://tempuri.org/IService1/AddExpertResponse")]
        System.Threading.Tasks.Task AddExpertAsync(WpfApplication1.ServiceReference1.Service1Experts Expert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEvalulation", ReplyAction="http://tempuri.org/IService1/AddEvalulationResponse")]
        void AddEvalulation(WpfApplication1.ServiceReference1.Service1Evalulation Evalulation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEvalulation", ReplyAction="http://tempuri.org/IService1/AddEvalulationResponse")]
        System.Threading.Tasks.Task AddEvalulationAsync(WpfApplication1.ServiceReference1.Service1Evalulation Evalulation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRequest", ReplyAction="http://tempuri.org/IService1/AddRequestResponse")]
        void AddRequest(WpfApplication1.ServiceReference1.Service1Request Request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRequest", ReplyAction="http://tempuri.org/IService1/AddRequestResponse")]
        System.Threading.Tasks.Task AddRequestAsync(WpfApplication1.ServiceReference1.Service1Request Request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUsers", ReplyAction="http://tempuri.org/IService1/AddUsersResponse")]
        void AddUsers(WpfApplication1.ServiceReference1.Service1Users Users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUsers", ReplyAction="http://tempuri.org/IService1/AddUsersResponse")]
        System.Threading.Tasks.Task AddUsersAsync(WpfApplication1.ServiceReference1.Service1Users Users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUsersRequest", ReplyAction="http://tempuri.org/IService1/AddUsersRequestResponse")]
        void AddUsersRequest(WpfApplication1.ServiceReference1.Service1Users_Request Users_Request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUsersRequest", ReplyAction="http://tempuri.org/IService1/AddUsersRequestResponse")]
        System.Threading.Tasks.Task AddUsersRequestAsync(WpfApplication1.ServiceReference1.Service1Users_Request Users_Request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectCompetition", ReplyAction="http://tempuri.org/IService1/SelectCompetitionResponse")]
        WpfApplication1.ServiceReference1.Service1Competition[] SelectCompetition();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectCompetition", ReplyAction="http://tempuri.org/IService1/SelectCompetitionResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Competition[]> SelectCompetitionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectEvalulation", ReplyAction="http://tempuri.org/IService1/SelectEvalulationResponse")]
        WpfApplication1.ServiceReference1.Service1Evalulation[] SelectEvalulation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectEvalulation", ReplyAction="http://tempuri.org/IService1/SelectEvalulationResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Evalulation[]> SelectEvalulationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectExperts", ReplyAction="http://tempuri.org/IService1/SelectExpertsResponse")]
        WpfApplication1.ServiceReference1.Service1Experts[] SelectExperts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectExperts", ReplyAction="http://tempuri.org/IService1/SelectExpertsResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Experts[]> SelectExpertsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectRequest", ReplyAction="http://tempuri.org/IService1/SelectRequestResponse")]
        WpfApplication1.ServiceReference1.Service1Request[] SelectRequest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectRequest", ReplyAction="http://tempuri.org/IService1/SelectRequestResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Request[]> SelectRequestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUsers", ReplyAction="http://tempuri.org/IService1/SelectUsersResponse")]
        WpfApplication1.ServiceReference1.Service1Users[] SelectUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUsers", ReplyAction="http://tempuri.org/IService1/SelectUsersResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Users[]> SelectUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUsersRequest", ReplyAction="http://tempuri.org/IService1/SelectUsersRequestResponse")]
        WpfApplication1.ServiceReference1.Service1Users_Request[] SelectUsersRequest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectUsersRequest", ReplyAction="http://tempuri.org/IService1/SelectUsersRequestResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Users_Request[]> SelectUsersRequestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindByIDUsers", ReplyAction="http://tempuri.org/IService1/FindByIDUsersResponse")]
        WpfApplication1.ServiceReference1.Service1Users FindByIDUsers(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindByIDUsers", ReplyAction="http://tempuri.org/IService1/FindByIDUsersResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Users> FindByIDUsersAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindByIdRequest", ReplyAction="http://tempuri.org/IService1/FindByIdRequestResponse")]
        WpfApplication1.ServiceReference1.Service1Request FindByIdRequest(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindByIdRequest", ReplyAction="http://tempuri.org/IService1/FindByIdRequestResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Request> FindByIdRequestAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindByIdCompetition", ReplyAction="http://tempuri.org/IService1/FindByIdCompetitionResponse")]
        WpfApplication1.ServiceReference1.Service1Competition FindByIdCompetition(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindByIdCompetition", ReplyAction="http://tempuri.org/IService1/FindByIdCompetitionResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Competition> FindByIdCompetitionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindByIdExperts", ReplyAction="http://tempuri.org/IService1/FindByIdExpertsResponse")]
        WpfApplication1.ServiceReference1.Service1Experts FindByIdExperts(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindByIdExperts", ReplyAction="http://tempuri.org/IService1/FindByIdExpertsResponse")]
        System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Experts> FindByIdExpertsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUsers", ReplyAction="http://tempuri.org/IService1/UpdateUsersResponse")]
        void UpdateUsers(WpfApplication1.ServiceReference1.Service1Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUsers", ReplyAction="http://tempuri.org/IService1/UpdateUsersResponse")]
        System.Threading.Tasks.Task UpdateUsersAsync(WpfApplication1.ServiceReference1.Service1Users user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateRequest", ReplyAction="http://tempuri.org/IService1/UpdateRequestResponse")]
        void UpdateRequest(WpfApplication1.ServiceReference1.Service1Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateRequest", ReplyAction="http://tempuri.org/IService1/UpdateRequestResponse")]
        System.Threading.Tasks.Task UpdateRequestAsync(WpfApplication1.ServiceReference1.Service1Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateExperts", ReplyAction="http://tempuri.org/IService1/UpdateExpertsResponse")]
        void UpdateExperts(WpfApplication1.ServiceReference1.Service1Experts experts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateExperts", ReplyAction="http://tempuri.org/IService1/UpdateExpertsResponse")]
        System.Threading.Tasks.Task UpdateExpertsAsync(WpfApplication1.ServiceReference1.Service1Experts experts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEvaluation", ReplyAction="http://tempuri.org/IService1/UpdateEvaluationResponse")]
        void UpdateEvaluation(WpfApplication1.ServiceReference1.Service1Evalulation evaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEvaluation", ReplyAction="http://tempuri.org/IService1/UpdateEvaluationResponse")]
        System.Threading.Tasks.Task UpdateEvaluationAsync(WpfApplication1.ServiceReference1.Service1Evalulation evaluation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCompetition", ReplyAction="http://tempuri.org/IService1/UpdateCompetitionResponse")]
        void UpdateCompetition(WpfApplication1.ServiceReference1.Service1Competition competition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateCompetition", ReplyAction="http://tempuri.org/IService1/UpdateCompetitionResponse")]
        System.Threading.Tasks.Task UpdateCompetitionAsync(WpfApplication1.ServiceReference1.Service1Competition competition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCompetition", ReplyAction="http://tempuri.org/IService1/DeleteCompetitionResponse")]
        void DeleteCompetition(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCompetition", ReplyAction="http://tempuri.org/IService1/DeleteCompetitionResponse")]
        System.Threading.Tasks.Task DeleteCompetitionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEvaluation", ReplyAction="http://tempuri.org/IService1/DeleteEvaluationResponse")]
        void DeleteEvaluation(int id_Request, int id_Expert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEvaluation", ReplyAction="http://tempuri.org/IService1/DeleteEvaluationResponse")]
        System.Threading.Tasks.Task DeleteEvaluationAsync(int id_Request, int id_Expert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteExpert", ReplyAction="http://tempuri.org/IService1/DeleteExpertResponse")]
        void DeleteExpert(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteExpert", ReplyAction="http://tempuri.org/IService1/DeleteExpertResponse")]
        System.Threading.Tasks.Task DeleteExpertAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteRequest", ReplyAction="http://tempuri.org/IService1/DeleteRequestResponse")]
        void DeleteRequest(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteRequest", ReplyAction="http://tempuri.org/IService1/DeleteRequestResponse")]
        System.Threading.Tasks.Task DeleteRequestAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        void DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUR", ReplyAction="http://tempuri.org/IService1/DeleteURResponse")]
        void DeleteUR(int id_User, int id_Request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUR", ReplyAction="http://tempuri.org/IService1/DeleteURResponse")]
        System.Threading.Tasks.Task DeleteURAsync(int id_User, int id_Request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WpfApplication1.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WpfApplication1.ServiceReference1.IService1>, WpfApplication1.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WpfApplication1.ServiceReference1.Service1Auth Authorisation(string Login, string Password) {
            return base.Channel.Authorisation(Login, Password);
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Auth> AuthorisationAsync(string Login, string Password) {
            return base.Channel.AuthorisationAsync(Login, Password);
        }
        
        public void AddCompetition(WpfApplication1.ServiceReference1.Service1Competition competition) {
            base.Channel.AddCompetition(competition);
        }
        
        public System.Threading.Tasks.Task AddCompetitionAsync(WpfApplication1.ServiceReference1.Service1Competition competition) {
            return base.Channel.AddCompetitionAsync(competition);
        }
        
        public void AddExpert(WpfApplication1.ServiceReference1.Service1Experts Expert) {
            base.Channel.AddExpert(Expert);
        }
        
        public System.Threading.Tasks.Task AddExpertAsync(WpfApplication1.ServiceReference1.Service1Experts Expert) {
            return base.Channel.AddExpertAsync(Expert);
        }
        
        public void AddEvalulation(WpfApplication1.ServiceReference1.Service1Evalulation Evalulation) {
            base.Channel.AddEvalulation(Evalulation);
        }
        
        public System.Threading.Tasks.Task AddEvalulationAsync(WpfApplication1.ServiceReference1.Service1Evalulation Evalulation) {
            return base.Channel.AddEvalulationAsync(Evalulation);
        }
        
        public void AddRequest(WpfApplication1.ServiceReference1.Service1Request Request) {
            base.Channel.AddRequest(Request);
        }
        
        public System.Threading.Tasks.Task AddRequestAsync(WpfApplication1.ServiceReference1.Service1Request Request) {
            return base.Channel.AddRequestAsync(Request);
        }
        
        public void AddUsers(WpfApplication1.ServiceReference1.Service1Users Users) {
            base.Channel.AddUsers(Users);
        }
        
        public System.Threading.Tasks.Task AddUsersAsync(WpfApplication1.ServiceReference1.Service1Users Users) {
            return base.Channel.AddUsersAsync(Users);
        }
        
        public void AddUsersRequest(WpfApplication1.ServiceReference1.Service1Users_Request Users_Request) {
            base.Channel.AddUsersRequest(Users_Request);
        }
        
        public System.Threading.Tasks.Task AddUsersRequestAsync(WpfApplication1.ServiceReference1.Service1Users_Request Users_Request) {
            return base.Channel.AddUsersRequestAsync(Users_Request);
        }
        
        public WpfApplication1.ServiceReference1.Service1Competition[] SelectCompetition() {
            return base.Channel.SelectCompetition();
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Competition[]> SelectCompetitionAsync() {
            return base.Channel.SelectCompetitionAsync();
        }
        
        public WpfApplication1.ServiceReference1.Service1Evalulation[] SelectEvalulation() {
            return base.Channel.SelectEvalulation();
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Evalulation[]> SelectEvalulationAsync() {
            return base.Channel.SelectEvalulationAsync();
        }
        
        public WpfApplication1.ServiceReference1.Service1Experts[] SelectExperts() {
            return base.Channel.SelectExperts();
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Experts[]> SelectExpertsAsync() {
            return base.Channel.SelectExpertsAsync();
        }
        
        public WpfApplication1.ServiceReference1.Service1Request[] SelectRequest() {
            return base.Channel.SelectRequest();
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Request[]> SelectRequestAsync() {
            return base.Channel.SelectRequestAsync();
        }
        
        public WpfApplication1.ServiceReference1.Service1Users[] SelectUsers() {
            return base.Channel.SelectUsers();
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Users[]> SelectUsersAsync() {
            return base.Channel.SelectUsersAsync();
        }
        
        public WpfApplication1.ServiceReference1.Service1Users_Request[] SelectUsersRequest() {
            return base.Channel.SelectUsersRequest();
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Users_Request[]> SelectUsersRequestAsync() {
            return base.Channel.SelectUsersRequestAsync();
        }
        
        public WpfApplication1.ServiceReference1.Service1Users FindByIDUsers(int id) {
            return base.Channel.FindByIDUsers(id);
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Users> FindByIDUsersAsync(int id) {
            return base.Channel.FindByIDUsersAsync(id);
        }
        
        public WpfApplication1.ServiceReference1.Service1Request FindByIdRequest(int id) {
            return base.Channel.FindByIdRequest(id);
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Request> FindByIdRequestAsync(int id) {
            return base.Channel.FindByIdRequestAsync(id);
        }
        
        public WpfApplication1.ServiceReference1.Service1Competition FindByIdCompetition(int id) {
            return base.Channel.FindByIdCompetition(id);
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Competition> FindByIdCompetitionAsync(int id) {
            return base.Channel.FindByIdCompetitionAsync(id);
        }
        
        public WpfApplication1.ServiceReference1.Service1Experts FindByIdExperts(int id) {
            return base.Channel.FindByIdExperts(id);
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.ServiceReference1.Service1Experts> FindByIdExpertsAsync(int id) {
            return base.Channel.FindByIdExpertsAsync(id);
        }
        
        public void UpdateUsers(WpfApplication1.ServiceReference1.Service1Users user) {
            base.Channel.UpdateUsers(user);
        }
        
        public System.Threading.Tasks.Task UpdateUsersAsync(WpfApplication1.ServiceReference1.Service1Users user) {
            return base.Channel.UpdateUsersAsync(user);
        }
        
        public void UpdateRequest(WpfApplication1.ServiceReference1.Service1Request request) {
            base.Channel.UpdateRequest(request);
        }
        
        public System.Threading.Tasks.Task UpdateRequestAsync(WpfApplication1.ServiceReference1.Service1Request request) {
            return base.Channel.UpdateRequestAsync(request);
        }
        
        public void UpdateExperts(WpfApplication1.ServiceReference1.Service1Experts experts) {
            base.Channel.UpdateExperts(experts);
        }
        
        public System.Threading.Tasks.Task UpdateExpertsAsync(WpfApplication1.ServiceReference1.Service1Experts experts) {
            return base.Channel.UpdateExpertsAsync(experts);
        }
        
        public void UpdateEvaluation(WpfApplication1.ServiceReference1.Service1Evalulation evaluation) {
            base.Channel.UpdateEvaluation(evaluation);
        }
        
        public System.Threading.Tasks.Task UpdateEvaluationAsync(WpfApplication1.ServiceReference1.Service1Evalulation evaluation) {
            return base.Channel.UpdateEvaluationAsync(evaluation);
        }
        
        public void UpdateCompetition(WpfApplication1.ServiceReference1.Service1Competition competition) {
            base.Channel.UpdateCompetition(competition);
        }
        
        public System.Threading.Tasks.Task UpdateCompetitionAsync(WpfApplication1.ServiceReference1.Service1Competition competition) {
            return base.Channel.UpdateCompetitionAsync(competition);
        }
        
        public void DeleteCompetition(int id) {
            base.Channel.DeleteCompetition(id);
        }
        
        public System.Threading.Tasks.Task DeleteCompetitionAsync(int id) {
            return base.Channel.DeleteCompetitionAsync(id);
        }
        
        public void DeleteEvaluation(int id_Request, int id_Expert) {
            base.Channel.DeleteEvaluation(id_Request, id_Expert);
        }
        
        public System.Threading.Tasks.Task DeleteEvaluationAsync(int id_Request, int id_Expert) {
            return base.Channel.DeleteEvaluationAsync(id_Request, id_Expert);
        }
        
        public void DeleteExpert(int id) {
            base.Channel.DeleteExpert(id);
        }
        
        public System.Threading.Tasks.Task DeleteExpertAsync(int id) {
            return base.Channel.DeleteExpertAsync(id);
        }
        
        public void DeleteRequest(int id) {
            base.Channel.DeleteRequest(id);
        }
        
        public System.Threading.Tasks.Task DeleteRequestAsync(int id) {
            return base.Channel.DeleteRequestAsync(id);
        }
        
        public void DeleteUser(int id) {
            base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public void DeleteUR(int id_User, int id_Request) {
            base.Channel.DeleteUR(id_User, id_Request);
        }
        
        public System.Threading.Tasks.Task DeleteURAsync(int id_User, int id_Request) {
            return base.Channel.DeleteURAsync(id_User, id_Request);
        }
    }
}
